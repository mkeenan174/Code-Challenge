{"version":3,"sources":["timer/Lap.js","timer/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Lap","props","className","children","Timer","lapTimes","lapCounter","state","running","time","start","lap","lapDisplay","this","retrieveLaps","myLaps","myCounter","sessionStorage","setItem","JSON","stringify","lapData","parse","getItem","counterData","displayCheck","setState","Date","now","stopwatch","setInterval","clearInterval","timerStart","timerStop","prevLap","presLap","formatTime","lapTime","push","id","console","log","saveLaps","length","milliseconds","Math","floor","slice","seconds","minutes","result","display","btnName","onClick","startStop","bind","timerReset","timerLap","style","visibility","map","index","key","clearAll","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b83e95a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Lap = (props) => {\r\n    return(\r\n        \r\n        <li className='laptime'>Time: {props.children}</li>\r\n        \r\n    )\r\n     \r\n}\r\n\r\nexport default Lap;","import React, { Component } from 'react';\r\nimport Lap from './Lap';\r\n\r\nclass Timer extends Component{\r\n    constructor(){\r\n        super();\r\n        this.lapTimes = [];\r\n        this.lapCounter = 1;\r\n        this.state = {\r\n            running : false,\r\n            time :0,\r\n            start: 0,\r\n            lap : 0,\r\n            lapDisplay: false\r\n            };\r\n    }\r\n    // On Component Mount we call retrievelaps\r\n    componentDidMount(){\r\n        this.retrieveLaps();\r\n    }\r\n    //Saves previous laps and the lap counter \r\n    saveLaps(myLaps, myCounter){\r\n        sessionStorage.setItem('myLapData', JSON.stringify(myLaps));\r\n        sessionStorage.setItem('myLapCounter', JSON.stringify(myCounter));\r\n    }\r\n\r\n    //Loads saved laptimes and lapcounter from this session\r\n    retrieveLaps(){\r\n        let lapData = JSON.parse(sessionStorage.getItem('myLapData'));\r\n        let counterData = JSON.parse(sessionStorage.getItem('myLapCounter'));\r\n        if (counterData !== null) this.lapCounter = counterData;\r\n        if(lapData !== null)this.lapTimes = lapData;\r\n        this.displayCheck();\r\n    }\r\n\r\n    //Manages sets timer start time and calculates elapsed time\r\n    timerStart(){\r\n        if(this.state.running === false){\r\n       this.setState({\r\n           running: true, \r\n           time: this.state.time,\r\n           start : Date.now() - this.state.time,\r\n       });\r\n    }\r\n       this.stopwatch = setInterval(() =>{\r\n            this.setState({\r\n                time: Date.now() - this.state.start\r\n            });\r\n       },10);\r\n    \r\n    }\r\n    \r\n \r\n    // Stops timer\r\n    timerStop(){\r\n        clearInterval(this.stopwatch);\r\n        this.setState({\r\n            running: false\r\n        })\r\n    }\r\n\r\n    startStop(){\r\n        if(this.state.running === false){\r\n            this.timerStart();\r\n        }else{\r\n            this.timerStop();\r\n        }\r\n    }\r\n\r\n    //Resets timer to zero by resetting all states\r\n    timerReset(){\r\n        this.setState({\r\n            running: false,\r\n            time: 0,\r\n            start: 0,\r\n            lap: 0\r\n        });\r\n        clearInterval(this.stopwatch);\r\n    }\r\n\r\n    //Calculates laptime and adds a lap object to the laptime array\r\n    timerLap(){\r\n        if(this.state.running === true){\r\n        let prevLap = this.state.lap;\r\n        let presLap =  this.state.time;\r\n        this.setState({\r\n            lap: this.state.time\r\n        });\r\n       this.formatTime(prevLap);\r\n       this.formatTime(presLap);\r\n       let lapTime = this.formatTime(presLap - prevLap);\r\n       this.lapTimes.push({id : this.lapCounter, lapTime: lapTime});\r\n       this.lapCounter++;\r\n       console.log(this.lapTimes);\r\n       this.saveLaps(this.lapTimes, this.lapCounter);\r\n       this.displayCheck();\r\n        }\r\n    }\r\n    \r\n    //Checks if the laptimes borad needs to be displayed\r\n    displayCheck(){\r\n        if(this.lapTimes.length > 0){\r\n            this.setState({\r\n                lapDisplay: true\r\n            });\r\n        }else{\r\n            this.setState({\r\n                lapDisplay: false\r\n            })\r\n        }\r\n    }\r\n\r\n    //formats a Date() into a string of format 00:00:00:000\r\n    formatTime(time){\r\n        let milliseconds = (\"00\" + (Math.floor(time / 1) % 1000)).slice(-3);\r\n        let seconds = (\"0\" + (Math.floor(time / 1000) % 60)).slice(-2);\r\n        let minutes = (\"0\" + (Math.floor(time / 60000) % 60)).slice(-2);\r\n        let hours = (\"0\" + Math.floor(time / 3600000)).slice(-2);\r\n        let result = hours+':'+minutes+':'+seconds+':'+milliseconds;\r\n        return result;\r\n    }\r\n\r\n    //Clears all laps from laptimes\r\n    clearAll(){\r\n        this.lapTimes = []\r\n        this.displayCheck();\r\n        this.lapCounter = 1;\r\n        this.saveLaps(this.lapTimes, this.lapCounter);\r\n        \r\n    }\r\n\r\n    render(){\r\n        const { time} = this.state;\r\n        let result = this.formatTime(time);\r\n        let display = 'hidden';\r\n        let btnName = 'Start';\r\n        if(this.state.lapDisplay === true) display = 'visible';\r\n        console.log(display);\r\n        if(this.state.running === true)btnName = 'Stop';\r\n        \r\n\r\n        return (\r\n         <div className='timer-container'>\r\n                <h1 className='timer-display'> {result}</h1>\r\n                <button className='button' onClick={this.startStop.bind(this)}>{btnName}</button>\r\n                <button  className='button' onClick={this.timerReset.bind(this)}>Reset</button>\r\n                <button  className='button' onClick={this.timerLap.bind(this)}>Lap</button>\r\n                <div>\r\n                <h3 style={{visibility: display}}className='lap-header'>Lap Times</h3>\r\n           \r\n                <ul>\r\n                  {\r\n                      //Mapping over our laptimes passing lap attributes as props to the lap component.\r\n                      this.lapTimes.map((lap, index) =>{\r\n                      return(<Lap key={index} id={lap.id}>{lap.lapTime}</Lap>);\r\n                      })\r\n                  }\r\n               </ul>\r\n               <button onClick={this.clearAll.bind(this)} className='clearall-btn' style={{visibility: display}}> Clear Times</button>\r\n            </div>\r\n        </div> \r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer ","import React from 'react';\nimport Timer from './timer/Timer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <div className=\"App\">\n        <Timer />\n      </div>\n      \n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}